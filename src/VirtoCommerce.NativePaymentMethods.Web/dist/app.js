(()=>{var e;e="NativePaymentMethods",void 0!==AppDependencies&&AppDependencies.push(e),angular.module(e,[]).config(["$stateProvider","$urlRouterProvider",(e,t)=>{e.state("workspace.NativePaymentMethodsState",{url:"/NativePaymentMethods",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",(e,t)=>{t.showBlade({id:"payment-methods-list",controller:"NativePaymentMethods.methodsListController",template:"Modules/$(VirtoCommerce.NativePaymentMethods)/Scripts/blades/methods-list.tpl.html",isClosingDisabled:!0})}]})}]).run(["platformWebApp.mainMenuService","platformWebApp.widgetService","$state",(e,t,a)=>{var o={path:"browse/NativePaymentMethods",icon:"fa fa-money",title:"NativePaymentMethods.menu-item-name",priority:100,action:()=>{a.go("workspace.NativePaymentMethodsState")},permission:"NativePaymentMethods:access"};e.addMenuItem(o),t.registerWidget({controller:"NativePaymentMethods.paymentLogoWidgetController",template:"Modules/$(VirtoCommerce.NativePaymentMethods)/Scripts/widgets/payment-logo-widget.html"},"nativePaymentDetails")}]),angular.module("NativePaymentMethods").controller("NativePaymentMethods.methodDetailsController",["$scope","NativePaymentMethods.webApi","platformWebApp.objCompareService","platformWebApp.dialogService","platformWebApp.bladeNavigationService",(e,t,a,o,n)=>{var r=e.blade;function i(){return r.originalEntity&&!a.equal(r.originalEntity,r.currentEntity)&&!r.isNew&&r.hasUpdatePermission()}r.headIcon="fa fa-money",r.refresh=()=>{r.currentEntityId?t.getById({id:r.currentEntityId},(e=>{r.currentEntity=e,r.originalEntity=angular.copy(r.currentEntity),r.title=e.name})):(r.currentEntity={isEnabled:!0},r.originalEntity=angular.copy(r.currentEntity),r.title="NativePaymentMethods.blades.method-details.labels.new-method"),r.isLoading=!1},e.setForm=e=>{r.formScope=e},r.metaFields=[{name:"code",isRequired:!0,isReadOnly:r.currentEntityId,title:"NativePaymentMethods.blades.method-details.labels.code",valueType:"ShortText"},{name:"name",isRequired:!0,isReadOnly:!1,title:"NativePaymentMethods.blades.method-details.labels.name",valueType:"ShortText"},{name:"isEnabled",title:"NativePaymentMethods.blades.method-details.labels.isEnabled",valueType:"Boolean"},{name:"description",title:"NativePaymentMethods.blades.method-details.labels.description",valueType:"LongText"}],r.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:()=>{r.refresh()},canExecuteMethod:()=>!0},{name:"platform.commands.save",icon:"fa fa-save",executeMethod:()=>{t.save(r.currentEntity,(t=>{var a=e.$parent.$parent.blades.find((e=>"payment-methods-list"===e.id));n.closeBlade(r),a.refresh()}),(function(e){n.setError(`${e.status}: ${e.statusText}`,r);var t={id:"errorDetails",title:"platform.dialogs.error-details.title",message:e.data.message};o.showErrorDialog(t)}))},canExecuteMethod:function(){return i()&&(!r.formScope||r.formScope.$valid)}},{name:"platform.commands.reset",icon:"fa fa-undo",executeMethod:()=>{angular.copy(r.originalEntity,r.currentEntity)},canExecuteMethod:i,permission:r.updatePermission}],r.refresh()}]),angular.module("NativePaymentMethods").controller("NativePaymentMethods.paymentDetailsLogoController",["$scope","FileUploader","platformWebApp.bladeNavigationService","platformWebApp.dialogService",(e,t,a,o)=>{var n=e.blade;if(n.title="NativePaymentMethods.blades.payment-logo.title",!e.logoUploader){const r=e.logoUploader=new t({scope:e,headers:{Accept:"application/json"},autoUpload:!0,removeAfterUpload:!0,filters:[{name:"imageFilter",fn:e=>{const t=/^.*\.(png|jpg|svg)$/.test(e.name.toLowerCase());if(!t){const e={title:"Filetype error",message:"Only PNG, JPG or SVG files are allowed."};o.showErrorDialog(e)}return t}}]});r.url="api/assets?folderUrl=nativepaymentlogos",r.onSuccessItem=(e,t)=>{n.currentEntity.logoUrl=t[0].url},r.onErrorItem=(e,t,o,r)=>{a.setError(e._file.name+" failed: "+(t.message?t.message:o),n)}}let r;function i(){return!angular.equals(n.currentEntity,n.originalEntity)}function l(){return i()&&r&&r.$valid}n.refresh=()=>{n.originalEntity=n.currentEntity,n.currentEntity=angular.copy(n.currentEntity),n.isLoading=!1},e.setForm=e=>{r=e},e.browseFiles=e=>{window.document.querySelector(`#${e}`).click()},n.saveChanges=()=>{angular.copy(n.currentEntity,n.originalEntity),e.bladeClose()},n.toolbarCommands=[{name:"platform.commands.save",icon:"fas fa-save",executeMethod:n.saveChanges,canExecuteMethod:l},{name:"platform.commands.set-to-default",icon:"fa fa-undo",executeMethod:()=>{n.currentEntity.logoUrl=null},canExecuteMethod:()=>!0}],n.onClose=e=>{a.showConfirmationIfNeeded(i(),l(),n,n.saveChanges,e,"NativePaymentMethods.dialogs.payment-details-save.title","NativePaymentMethods.dialogs.payment-details-save.message")},n.refresh()}]),angular.module("NativePaymentMethods").controller("NativePaymentMethods.methodsListController",["$scope","NativePaymentMethods.webApi","platformWebApp.bladeNavigationService",(e,t,a)=>{var o=[],n=e.blade;function r(e){var t={id:"payment-method-details",controller:"NativePaymentMethods.methodDetailsController",template:"Modules/$(VirtoCommerce.NativePaymentMethods)/Scripts/blades/method-details.tpl.html",currentEntityId:e};a.showBlade(t)}n.title="NativePaymentMethods.blades.methods-list.title",n.headIcon="fa fa-money",n.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:()=>{n.refresh()},canExecuteMethod:()=>!0},{name:"platform.commands.add",icon:"fa fa-plus",executeMethod:()=>{r(null)},canExecuteMethod:()=>!0},{name:"platform.commands.delete",icon:"fa fa-trash",executeMethod:()=>{var e=o.map((e=>e.id));t.delete({ids:e},(e=>{n.refresh()}))},canExecuteMethod:()=>o.length>0}],n.refresh=()=>{n.isLoading=!0,t.get((e=>{n.data=e.results,n.selectedAll=!1,n.isLoading=!1}))},e.updateSelectionList=()=>{o=n.data.filter((e=>e.selected))},e.selectAll=t=>{angular.forEach(n.data,(e=>{e.selected=t})),e.updateSelectionList()},e.selectNode=t=>{e.selectedNodeId=t.id,r(t.id)},n.refresh()}]),angular.module("NativePaymentMethods").factory("NativePaymentMethods.webApi",["$resource",e=>e("api/native-payment-methods",{},{delete:{method:"DELETE",url:"api/native-payment-methods"},getById:{method:"GET",url:"api/native-payment-methods/:id"},save:{method:"POST",url:"api/native-payment-methods"}})]),angular.module("platformWebApp").controller("NativePaymentMethods.paymentLogoWidgetController",["$scope","platformWebApp.bladeNavigationService",function(e,t){var a=e.blade;e.openBlade=function(){var e={id:"paymentDetailsLogo",currentEntity:a.currentEntity,controller:"NativePaymentMethods.paymentDetailsLogoController",template:"Modules/$(VirtoCommerce.NativePaymentMethods)/Scripts/blades/method-logo.html"};t.showBlade(e,a)}}])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,